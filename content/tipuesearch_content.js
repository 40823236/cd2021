var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲: https://github.com/40823236/cd2021 \n 小組倉儲: https://40823236.github.io/stage1-bg7/content/ \n 兩人小組: 40823212 、 40823236 \n 四人小組倉儲: https://github.com/40823236/stage2-bg9 \n 四人小組組員:  40823212 ， 40823219 ，   40823231 ， 40823236 \n 八人小組倉儲: https://40823236.github.io/stage3-bg3/content/index.html \n 八人小組組員: 40823202 、 40823203 、 \xa0 40823212 ， 40823219 ， 40823222 、 \xa0 40823231 ， 40823236 、 40823244 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Stage1-bg7', 'text': '\n \n', 'tags': '', 'url': 'Stage1-bg7.html'}, {'title': 'W1', 'text': '使用黑窗開啟Leo，並建立 .leoID.txt \n \n \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2(零件)', 'text': '討論主題 \n 主題:CNC 三爪夾頭 \n 動機:不用對正中心 \n \n 零件繪製 \n 40823212繪製 \n 斜齒輪 \n \n 主體 \n \n 上蓋 \n \n 小T輪 \n \n 上爪齒 \n \n 下爪齒 \n \n \n', 'tags': '', 'url': 'W2(零件).html'}, {'title': 'W3(模擬)', 'text': '試動 \n \n', 'tags': '', 'url': 'W3(模擬).html'}, {'title': 'W4', 'text': '小組影片報告 \n Reveal \n \n 模擬 \n \n 個人網站報告 \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '載入中… \n', 'tags': '', 'url': 'W5.html'}, {'title': 'Stage2-bg9', 'text': '四人小組 \n 小組倉儲: https://github.com/40823236/stage2-bg9 \n 小組組員: 40823212 、 40823219 、 40823231 、40823236 \n', 'tags': '', 'url': 'Stage2-bg9.html'}, {'title': 'W5 討論主題', 'text': '4/7討論主題 \n 主題:火車輪 \n \n', 'tags': '', 'url': 'W5 討論主題.html'}, {'title': 'W7零件繪製', 'text': '零件1:車輪連接桿 \n \n 零件2:車輪 \n \n 零件3:區拐銷 \n \n 零件4:搖臂連接 \n \n 零件5:十字頭連結桿 \n \n 零件6:搖臂 \n \n 零件7:ㄑ字搖臂連接桿 \n \n 零件8:ㄑ字搖桿 \n \n 零件9:活塞閥 \n \n 零件10:上活塞 \n \n 零件11:上活塞連接桿 \n \n 零件12:下活塞 \n \n 零件13:輪軸 \n \n 零件14:火車主體 \n \n \n', 'tags': '', 'url': 'W7零件繪製.html'}, {'title': 'W7~W8CoppeliaSim程式模擬', 'text': '\n 第一次模擬 \n 零件以及轉軸順序錯誤 \n \n 第二次模擬 \n 桿子沒有接好，導致掉落 \n \n 第三次模擬 \n 最終模擬成品 \n \n', 'tags': '', 'url': 'W7~W8CoppeliaSim程式模擬.html'}, {'title': 'W9小組報告及影片', 'text': '\n', 'tags': '', 'url': 'W9小組報告及影片.html'}, {'title': 'Stage3-bg3', 'text': '八人小組倉儲: https://40823236.github.io/stage3-bg3/content/index.html \n 八人小組組員: 40823202 、 40823203 、 \xa0 40823212 ， 40823219 ， 40823222 、 \xa0 40823231 ， 40823236 、 40823244 \n \n', 'tags': '', 'url': 'Stage3-bg3.html'}, {'title': 'W9', 'text': '統整組員stage1、stage2的專案。 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'Stage1', 'text': 'bg7 \n 主題:三爪夾頭 \n 原理 夾頭底座的齒條和齒盤導軌嚙合,齒盤的斜面與斜 齒輪嚙合,當斜齒輪轉動時,帶動齒盤轉動,齒盤 背面的導軌也跟著轉動,讓夾頭底座的齒條跟著導 軌向中心移動,進而夾持工件。 \n 繪製零件:40823212 \n 程式模擬:40823236 \n bg12 \n 主題: 鋁罐壓扁機 \n 原理:利用直線運動機構分為精確直線運動機構和近似直線運動機構兩類。其中精確直線運動機構的設計思想主要有兩種：一種是利用幾何中的反演變換，把連杆末端的圓弧路徑反演為直線，用機械反演器可以完成這一功能；另一種則是通過兩個不平行的連杆結構，把路徑限制在兩個平面的交線。近似直線運動機構則是通過多個杆件實現自由度為1的連接，調整杆件的長度使得一點的運動軌跡中包含一段近似直的線段。 \n 繪製零件:40823203 \n 程式模擬:40823202 \n bg19 \n 主題:格鬥機器人 \n 原理:彈射機器人，他的問題是攻擊破壞性低，很難直接將對手擊殺，只能讓對手憑重力下來把自己摔壞或把對手丟進OUT區。彈射主要攻擊方式壓縮氣體沖入汽缸，汽缸快速反應，彈射板才能彈起來 \n 繪製人員:40823219、40823231 \n 程式模擬:40823219、40823231 \n bg22 \n 主題:自動磨豆機 \n 原理 利用輾壓研磨原理，讓咖啡豆在兩塊圓錐鐵中輾壓研磨，錐鐵的距離決定咖啡粉的粗細程度，錐鐵間的距離愈近，粉末愈細；反之，粉末愈粗。 \n 繪製組員:40823244\xa0 \n 程式模擬:40823222\xa0 \n', 'tags': '', 'url': 'Stage1.html'}, {'title': 'Stage2', 'text': 'bg9 \n 主題:蒸汽火車 \n 原理 它是利用燃燒柴油或煤炭等燃料，將鍋爐中的水加熱以產生蒸氣，再由汽缸動力經連桿傳動機構，來推動輪子使車子前進。 \n 繪圖: 40823212 \n 模擬:40823219，40823231、40823236 \n bg10 \n 主題:彈珠軌道 \n 原理:1.運用阿基米得原理，讓彈珠可以沿著一個平面向上移動。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa02.運用凸輪原理，使其做一個上下的使其做一個上下的反覆運動，讓彈珠可以像爬階梯一樣。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa03.用圓盤的轉動，將球運送至彈珠台(控制圓盤的轉數去查看彈珠的運動軌跡)。 \n 繪圖: 40823202 、40823203 、40823244\xa0 \n 模擬:40823202 、40823222\xa0 \n', 'tags': '', 'url': 'Stage2.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'task1', 'text': '讀取  stage3_2b.txt , 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結. \n stage3-bg1 repo  |  stage3-bg1 site  |  40823245 repo  |  40823245 site  |  40823251 repo  |  40823251 site  |  40823208 repo  |  40823208 site  |  40823213 repo  |  40823213 site  |  40823232 repo  |  40823232 site  |  40823234 repo  |  40823234 site  |  40823235 repo  |  40823235 site  |  40823246 repo |  40823246 site ---------- stage3-bg2 repo  |  stage3-bg2 site  |  40823217 repo  |  40823217 site  |  40823201 repo  |  40823201 site  |  40823209 repo  |  40823209 site  |  40823210 repo  |  40823210 site  |  40823206 repo  |  40823206 site  |  40823207 repo  |  40823207 site  |  40823223 repo  |  40823223 site  |  40823224 repo |  40823224 site ---------- stage3-bg3 repo  |  stage3-bg3 site  |  40823236 repo  |  40823236 site  |  40823202 repo  |  40823202 site  |  40823203 repo  |  40823203 site  |  40823212 repo  |  40823212 site  |  40823219 repo  |  40823219 site  |  40823222 repo  |  40823222 site  |  40823231-2 repo  |  40823231-2 site  |  40823244 repo |  40823244 site ---------- stage3-bg4 repo  |  stage3-bg4 site  |  40823239 repo  |  40823239 site  |  s40723140 repo  |  s40723140 site  |  s40723128 repo  |  s40723128 site  |  s40723139 repo  |  s40723139 site  |  s40723106 repo  |  s40723106 site  |  s40723135 repo  |  s40723135 site  |  s40723143 repo  |  s40723143 site  |  s40723215 repo |  s40723215 site ---------- stage3-bg5 repo  |  stage3-bg5 site  |  40823221 repo  |  40823221 site  |  40823204 repo  |  40823204 site  |  40823205 repo  |  40823205 site  |  40823220 repo  |  40823220 site  |  40823228 repo  |  40823228 site  |  40823237 repo  |  40823237 site  |  40823242 repo  |  40823242 site  |  40823250 repo |  40823250 site  |  40832244 repo |  40832244 site ---------- stage3-bg6 repo  |  stage3-bg6 site  |  40823225 repo  |  40823225 site  |  40823214 repo  |  40823214 site  |  40823218 repo  |  40823218 site  |  40823211 repo  |  40823211 site  |  40823248 repo  |  40823248 site  |  40823247 repo  |  40823247 site  |  40823216 repo  |  40823216 site  |  40823238 repo |  40823238 site ---------- stage3-bg7 repo  |  stage3-bg7 site  |  40623144 repo  |  40623144 site  |  40823233 repo  |  40823233 site  |  s40723224 repo  |  s40723224 site  |  40823241 repo  |  40823241 site  |  40423155 repo  |  40423155 site  |  40823227 repo  |  40823227 site  |  s40723233 repo  |  s40723233 site ---------- \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '使用白窗控制Coppeliasim \n \n \n 程式碼參考第一組成員40823245~ \n import sim as vrep\nimport math\nimport random\nimport time\nimport keyboard\n  \nprint (\'Start\')\n  \n# Close eventual old connections\nvrep.simxFinish(-1)\n# Connect to V-REP remote server\nclientID = vrep.simxStart(\'192.168.1.111\', 19997, True, True, 5000, 5)\n   \nif clientID !=-1:\n    print (\'Connected to remote API server\')\n    \n    res = vrep.simxAddStatusbarMessage(\n        clientID, "40823231",\n        vrep.simx_opmode_oneshot)\n           \n    if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):\n        print("Could not add a message to the status bar.")\n           \n    opmode = vrep.simx_opmode_oneshot_wait\n      \n    vrep.simxStartSimulation(clientID, opmode)\n    ret,shaft1=vrep.simxGetObjectHandle(clientID,"shaft_1",opmode)\n    ret,shaft2=vrep.simxGetObjectHandle(clientID,"shaft_2",opmode)\n    ret,shaft3=vrep.simxGetObjectHandle(clientID,"shaft_3",opmode)\n \n    while True:\n        if keyboard.is_pressed("w"):\n            vrep.simxSetJointTargetVelocity(clientID,shaft1,2,opmode)\n            print("w")\n             \n        if keyboard.is_pressed("s"):\n            vrep.simxSetJointTargetVelocity(clientID,shaft1,0,opmode)\n            print("s")\n             \n        if keyboard.is_pressed("a"):\n            vrep.simxSetJointTargetVelocity(clientID,shaft2,2,opmode)\n            print("a")\n \n        if keyboard.is_pressed("b"):\n            vrep.simxSetJointTargetVelocity(clientID,shaft2,0,opmode)\n            print("b")\n             \n        if keyboard.is_pressed("c"):\n            vrep.simxSetJointTargetVelocity(clientID,shaft3,0.1,opmode)\n            print("c")\n \n        if keyboard.is_pressed("z"):\n            vrep.simxSetJointTargetVelocity(clientID,shaft3,0,opmode)\n            print("z")            \nelse:\n    print (\'Failed connecting to  remote API server\')\n    print (\'End\')\n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'W11', 'text': '', 'tags': '', 'url': 'W11.html'}, {'title': '小組討論內容', 'text': '構想: 利用stage2-bg10(彈珠檯)以及stage2-bg9(火車)結合，並新增兩台機器， \n 使用火車搭配鐵軌進行運送，將球運送至每台機器上。 \n 功能說明: \n 第一台為stage2-bg10的彈珠台，球體運送完後會自行進行模擬 \n 第二台為新版彈珠台，主要控制為拉桿，透過拉桿將球體彈出，所觸碰到的機關會計算分數 \n 第三台為迷宮，透過控制迷宮板使球體移動來通關迷宮 \n 構想圖: \n \n \n', 'tags': '', 'url': '小組討論內容.html'}, {'title': 'W12 零件', 'text': '', 'tags': '', 'url': 'W12 零件.html'}, {'title': '火車', 'text': '全部壓縮擋(stl) \n 火車的主體 \n \n 擋板 \n \n 上蓋版 \n \n 下活塞 \n \n 下活塞連 \n \n 前車輪 \n \n 後車輪 \n \n 活塞桶 \n \n 下活塞連接桿 \n \n 火車組合件 \n \n', 'tags': '', 'url': '火車.html'}, {'title': '彈珠檯', 'text': '第一版 \n 主體 \n \n 擊球機構 \n \n 往復機構 \n \n', 'tags': '', 'url': '彈珠檯.html'}, {'title': '迷宮', 'text': '第一版 \n 組合圖 \n \n 迷宮檯面 \n \n 旋轉機構 \n \n 旋轉軸 \n \n 第二版 \n 第二版 \n 迷宮 \n 零件下載： 點我 . \n 組合圖： \n \n 迷宮主體： \n \n 第二層支架： \n \n 第三層支架： \n \n 桿子四個(用來連接支架的)： \n \n 風扇機構： \n \n 風扇連接桿： \n \n 滑板機構： \n \n 連接滑板機構： \n \n \n \n', 'tags': '', 'url': '迷宮.html'}, {'title': 'W13', 'text': 'Robodk測試 \n \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W15', 'text': '影片整理 \n 影片1 \n \n 首先要先找出A1以及A2的夾角，可以透過畢氏定理列出 \n \n 並透過餘弦定理可以將公式轉換為 \n \n 將公式用COSalpha表示，並將r2次方帶入第一個公式得 \n \n 再透過下圖我們可以得知q2=180-alpha \n \n 因此可得知COSq2=-COSalpha，將負號移過去可以得到 \n \n 因此我們可以得知q2 \n \n 接下來，以a2為長邊畫出一個直角三角形 \n \n 由這個三角形我們可以得到 \n \n 此時劃出一個連接兩條手臂的直角三角形 \n \n 透過此三角形可得出beta角公式 \n \n 劃出一個大直角三角形 \n \n 由此三角形可推得 \n \n \n 透過前面所推導的公式q1可得 \n \n 若手臂移動，如下圖 \n \n 因alpha、beta以及q1關系改變 \n \n 則q1和q2公式會變為 \n \n \n \n 此為兩種比較圖 \n \n \n 特定的線性函數不是幾何，有一個表達式E \n 旋轉q1沿x方向平移a1；旋轉q2，由a2在x方向進行平移，如果展開這個，全部相乘 \n 一起轉變得到此表達式，表示尾端姿態的矩陣 \n \n 分解x與y座標 \n \n 平方X和Y方程式後兩兩相加可得知角度q2 \n \n \n 製作後的方程式: \n \n 此為已知方程式: \n \n 只考慮y的方程式，可以確定a、b、c值，一旦知道這些，那麼就可以有q1的方程式 \n \n \n 將前面得知地此式，帶入q1進行簡化 \n \n 即可得此式 \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'W16 吸盤手臂', 'text': '', 'tags': '', 'url': 'W16 吸盤手臂.html'}, {'title': 'Onshape 繪圖', 'text': '吸盤手臂 \n', 'tags': '', 'url': 'Onshape 繪圖.html'}, {'title': 'MTB robot 場景', 'text': 'W16_exam \n', 'tags': '', 'url': 'MTB robot 場景.html'}, {'title': '手臂末端加入吸盤', 'text': '\n', 'tags': '', 'url': '手臂末端加入吸盤.html'}, {'title': '逆向運動學函式', 'text': 'function moving(x,y)\n    a=0.4\n    b=0.4\n    c=math.pow((math.pow(x,2)+math.pow(y,2)),0.5)\n    s=(a+b+c)/2\n    area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)\n    h=area/(2*c)\n    deg1_base=math.atan(x/y)\n    if x<0 and y<0 then\n        deg1_base=deg1_base+math.pi\n    end\n    deg1_tri=math.asin(h/a)\n    deg1=deg1_base+deg1_tri\n    deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)\n    deg3=deg2-deg1\n    sim.setJointTargetPosition(joint01,deg1)\n    sim.setJointTargetPosition(joint02,-deg2)\n    sim.setJointTargetPosition(joint03,deg3)\nend\n\n\nfunction sysCall_threadmain()\n    joint01=sim.getObjectHandle(\'joint1\')\n    joint02=sim.getObjectHandle(\'joint2\')\n    joint03=sim.getObjectHandle(\'joint3\')\n    jointz=sim.getObjectHandle(\'jointz\')\n    sim.setJointTargetPosition(joint01,0)\n    sim.setJointTargetPosition(joint02,0)\n    sim.setJointTargetPosition(joint03,0)\n    sim.setJointTargetPosition(jointz,0)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.1)\n    sim.wait(5)\n    sim.setJointTargetPosition(jointz,0)\n    moving(0.2,0.7)\n    sim.wait(5)\n    sim.setIntegerSignal("pad_switch",0)\n    sim.wait(5)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.1)\n    sim.wait(5)\n    sim.setJointTargetPosition(jointz,0)\n    sim.wait(5)\n    moving(-0.3,-0.55)\n    sim.wait(2)\n    sim.setIntegerSignal("pad_switch",0)\n    sim.wait(5)\n    sim.setIntegerSignal("pad_switch",1)\n    sim.setJointTargetPosition(jointz,-0.1)\n    sim.wait(5)\n    sim.setJointTargetPosition(jointz,0)\n    sim.wait(5)\n\nend\n\nfunction sysCall_cleanup()\n    -- Put some clean-up code here\nend\n\n-- See the user manual or the available code snippets for additional callback functions and details\n \n \n \n function sysCall_init() \n    axis1=sim.getObjectHandle(\'joint1\')\n    axis2=sim.getObjectHandle(\'joint2\')\n    axis3=sim.getObjectHandle(\'jointz\')\n    axis4=sim.getObjectHandle(\'joint3\')\n    suctionPad=sim.getObjectHandle(\'suctionPad\')\n    BaseFrame=sim.getObjectHandle("BaseFrame")\n    block =sim.getObjectHandle("box")\n    rotation1 = 0\n    rotation2 = 0\n    distance3 = 0\n    deg = math.pi/180\nend\nfunction sysCall_actuation() \n\n    message, auxiliaryData=sim.getSimulatorMessage()\n        while message ~= -1 do\n            key=auxiliaryData[1]\n            sim.addStatusbarMessage(\'????? key:\'..key)\n            if (message==sim.message_keypress) then\n                if (auxiliaryData[1]==101) then --e activate the suction pad\n                    -- if key e pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if e\n                if (auxiliaryData[1]==069) then --E activate the suction pad\n                    -- if key E pressed activate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'true\')\n                end -- if E\n                if (auxiliaryData[1]==113) then --q deactivate the suction pad\n                    -- if key q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if q\n                if (auxiliaryData[1]==081) then --Q deactivate the suction pad\n                    -- if key Q pressed deactivate the suction mode\nsim.setScriptSimulationParameter(sim.getScriptAssociatedWithObject(suctionPad),\'active\',\'false\')\n                end -- if Q\n                if (auxiliaryData[1]==068) then --D right turn in degree\n                    -- if key D pressed axis1 angle adds 43.793 degrees\n                     rotation1 = rotation1 + 43.793*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if D\n                if (auxiliaryData[1]==065) then --A left turn in degree\n                    -- if key A pressed axis1 angle substract 237.252 degrees\n                     rotation1 = rotation1  +237.252*deg\n                     sim.setJointPosition(axis1, rotation1)\n                end -- if A\n                if (auxiliaryData[1]==100) then --d right turn in degree\n                    -- if key d pressed axis1 angle adds 66.638 degrees\n                     rotation2 = rotation2 + 66.638*deg\n                     sim.setJointPosition(axis2, rotation2)\n                end -- if d\n                if (auxiliaryData[1]==097) then --a right turn in degree\n                    -- if key a pressed axis1 angle adds 154.87 degrees\n                     rotation2 = rotation2 - 154.87*deg\n                     sim.setJointPosition(axis2, rotation2)\n                end -- if a\n                if (auxiliaryData[1]==115) then --s suction pad down\n                    -- if key s pressed axis3 will down 0.08 m \n                     distance3 = distance3 + 0.08\n                     sim.setJointPosition(axis3, distance3)\n                end -- if s\n                if (auxiliaryData[1]==119) then --w suction pad up\n                    -- if key w pressed axis3 will up 0.08 m \n                    -- ????? 8 ??\n                     distance3 = distance3 - 0.08 \n                     sim.setJointPosition(axis3, distance3)\n                end -- if w\n                if (auxiliaryData[1]==99) then --c coordinate of block\n                    blockPosition = sim.getObjectPosition(block, BaseFrame)\n                    sim.addStatusbarMessage("???????:"..table_to_string(blockPosition))\n                end --if c\n           end  -- if\n    message, auxiliaryData=sim.getSimulatorMessage()\n        end -- while\nend -- function\nfunction sysCall_sensing() \nend\nfunction sysCall_cleanup() \nend \nfunction table_to_string(tbl)\n    local result = "{"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == "string" then\n            result = result.."[\\""..k.."\\"]".."="\n        end\n\n        -- Check the value type\n        if type(v) == "table" then\n            result = result..table_to_string(v)\n        elseif type(v) == "boolean" then\n            result = result..tostring(v)\n        else\n            v = round(v, 4)\n            result = result.."\\""..v.."\\""\n        end\n        result = result..","\n    end\n    -- Remove leading commas from the result\n    if result ~= "" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result.."}"\nend\nfunction round(x, n)\n    n = math.pow(10, n or 0)\n    x = x * n\n    if x >= 0 then x = math.floor(x + 0.5) else x = math.ceil(x - 0.5) end\n    return x / n\nend\nfunction insertBox()\n    -- Generate random numbers\n    local rand1 = math.random()\n    local rand2 = math.random()\n    local rand3 = math.random()\n    -- Generate random disturbances on position and orientation\n    local dx = (2*rand1-1)*0.1\n    local dy = (2*rand2-1)*0.1\n    local dphi = (2*rand3-1)*0.5\n    local disturbedCoordinates = {0,0,0}\n    disturbedCoordinates[1] = insertCoordinate[1]+dx\n    disturbedCoordinates[2] = insertCoordinate[2]+dy\n    disturbedCoordinates[3] = insertCoordinate[3]\n    -- Copy and paste box and boxDummy\n    local insertedObjects = sim.copyPasteObjects({box,boxDummy},0)\n    -- Update last inserted box time\n    T_last_inserted = sim.getSimulationTime()\n    -- Move and rotate\n    sim.setObjectPosition(insertedObjects[1],-1,disturbedCoordinates)\n    sim.setObjectOrientation(insertedObjects[1],-1,{0,0,dphi})\n    -- Store handles to boxes and dummies\n    table.insert(boxList,insertedObjects[1])\n    table.insert(boxDummyList,insertedObjects[2]) \n    -- Decide if object is good or bad\n    local decision = math.random() \n    if decision <= goodPercentage then\n    -- Object is good, assign goodColor\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,goodColor)\n        table.insert(boolList,true)\n    else\n    -- Object is bad, assign random color\n        sim.setShapeColor(insertedObjects[1],nil,sim.colorcomponent_ambient_diffuse,{rand1,rand2,rand3})\n        table.insert(boolList,false)\n    end\nend\n \n', 'tags': '', 'url': '逆向運動學函式.html'}, {'title': 'Python remote API', 'text': '', 'tags': '', 'url': 'Python remote API.html'}, {'title': '直播影片', 'text': '\n \n \n \n \n', 'tags': '', 'url': '直播影片.html'}]};